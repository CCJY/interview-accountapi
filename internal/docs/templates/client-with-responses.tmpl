
{{range .}}{{$opid := .OperationId}}{{$op := .}}
type {{genResponseTypeName $opid | ucFirst}} struct {
    Body         []byte
	HTTPResponse *resty.Response
    {{- range getResponseTypeDefinitions .}}
    {{.TypeName}} *{{.Schema.TypeDecl}}
    {{- end}}
}

// Status returns HTTPResponse.Status
func (r {{genResponseTypeName $opid | ucFirst}}) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status()
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r {{genResponseTypeName $opid | ucFirst}}) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode()
    }
    return 0
}
{{end}}


{{range .}}
{{$opid := .OperationId -}}
{{/* Generate client methods (with responses)*/}}

// {{$opid}}{{if .HasBody}}WithBody{{end}}WithResponse request{{if .HasBody}} with arbitrary body{{end}} returning *{{genResponseTypeName $opid}}
func (c *Client) {{$opid}}{{if .HasBody}}WithBody{{end}}WithResponse(server string{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params *{{$opid}}Params{{end}}{{if .HasBody}}, contentType string, body io.Reader{{end}}) (*{{genResponseTypeName $opid}}, error){
    rsp, err := c.New{{$opid}}Request{{if .HasBody}}WithBody{{end}}(server{{genParamNames .PathParams}}{{if .RequiresParamObject}}, params{{end}}{{if .HasBody}}, contentType, body{{end}})
    if err != nil {
        return nil, err
    }
    return Parse{{genResponseTypeName $opid | ucFirst}}(rsp)
}

{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}
{{$bodyRequired := .BodyRequired -}}
{{range .Bodies}}
func (c *Client) {{$opid}}{{.Suffix}}WithResponse(server string{{genParamArgs $pathParams}}{{if $hasParams}}, params *{{$opid}}Params{{end}}, body {{$opid}}{{.NameTag}}RequestBody) (*{{genResponseTypeName $opid}}, error) {
    rsp, err := c.New{{$opid}}{{.Suffix}}Request(server{{genParamNames $pathParams}}{{if $hasParams}}, params{{end}}, body)
    if err != nil {
        return nil, err
    }
    return Parse{{genResponseTypeName $opid | ucFirst}}(rsp)
}
{{end}}

{{end}}{{/* operations */}}


{{/* Generate parse functions for responses*/}}
{{range .}}{{$opid := .OperationId}}

// Parse{{genResponseTypeName $opid | ucFirst}} parses an HTTP response from a {{$opid}}WithResponse call
func Parse{{genResponseTypeName $opid | ucFirst}}(rsp *resty.Response) (*{{genResponseTypeName $opid}}, error) {
    response := &{{genResponseTypeName $opid}}{
        Body: rsp.Body(),
        HTTPResponse: rsp,
    }

    {{ if getResponseTypeDefinitions .}}
	switch {
    {{- range $typeIdx, $type := getResponseTypeDefinitions .}}
        {{if or  (eq "application/json" $type.ContentTypeName) (eq "text/x-json" $type.ContentTypeName) }}
       case strings.Contains(rsp.Header().Get("Content-Type"), "json") && rsp.StatusCode() == {{$type.ResponseName}}:
        var dest {{$type.Schema.TypeDecl}}
        if err := json.Unmarshal(rsp.Body(), &dest); err != nil {
            return nil, err
        }
        response.{{$type.TypeName}} = &dest 
        {{end}}

        {{if or  (eq "application/yaml" $type.ContentTypeName) (eq "application/x-yaml" $type.ContentTypeName) (eq "text/yaml" $type.ContentTypeName) (eq "text/x-yaml" $type.ContentTypeName) }}
       case strings.Contains(rsp.Header().Get("Content-Type"), "yaml") && rsp.StatusCode() == {{$type.ResponseName}}:
        var dest {{$type.Schema.TypeDecl}}
        if err := yaml.Unmarshal(rsp.Body(), &dest); err != nil {
            return nil, err
        }
        response.{{$type.TypeName}} = &dest 
        {{end}}
        {{if or (eq "application/xml" $type.ContentTypeName) (eq "text/xml" $type.ContentTypeName)  }}
       case strings.Contains(rsp.Header().Get("Content-Type"), "xml") && rsp.StatusCode() == {{$type.ResponseName}}:
        var dest {{$type.Schema.TypeDecl}}
        if err := xml.Unmarshal(rsp.Body(), &dest); err != nil {
            return nil, err
        }
        response.{{$type.TypeName}} = &dest 
        {{end}}
    {{- end}}
    }
    {{end}}

    return response, nil
}
{{end}}{{/* range . $opid := .OperationId */}}